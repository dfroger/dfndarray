from os.path import join

def init(ctx):
    from waflib.Build import BuildContext, CleanContext, InstallContext, UninstallContext

    if ctx.options.out:
        ctx.options.out = realpath(ctx.options.out)

    for x in 'debug release'.split():
        for y in (BuildContext, CleanContext, InstallContext, UninstallContext):
            name = y.__name__.replace('Context','').lower()
            class tmp(y):
                cmd = name + '_' + x
                variant = x

    def buildall(ctx):
        import waflib.Options
        for x in ['build_debug', 'build_release']:
            waflib.Options.commands.insert(0, x)

def options(opt):
    opt.load('compiler_cxx')
    opt.add_option('--miniconda', action='store', default='',
        help='Search libraries in this miniconda directory.')

def configure(conf):
    conf.load('compiler_cxx')
    miniconda_inc = join(conf.options.miniconda, 'include')
    miniconda_lib = join(conf.options.miniconda, 'lib')
    conf.env.prepend_value('INCLUDES', [miniconda_inc])
    conf.env.prepend_value('LIBPATH', [miniconda_lib])
    conf.env.prepend_value('RPATH', [miniconda_lib])
    conf.check(header_name='dfndarray.hxx', features='cxx cprogram')
    conf.check_cxx(lib='dfndarray')

    orig_env = conf.env

    # debug env variant
    conf.setenv('debug', env=orig_env.derive())
    conf.env.prepend_value('CXXFLAGS',['-O0', '-g', '-DDFNDARRAY_RUNTIME_CHECK',])

    # release env variant
    conf.setenv('release', env=orig_env.derive())
    conf.env.prepend_value('CXXFLAGS',['-O3', '-g', '-DNDEBUG',])


def build(bld):

    if not bld.variant:
        bld.fatal('Call "waf build_debug" or "waf build_release" (same for install and clean)')

    bld.program(
        source='example.cxx',
        target='main',
        lib='dfndarray',
    )


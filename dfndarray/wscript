#!/usr/bin/env python

from os.path import join

VERSION='0.1.0'

top = '.'
out = 'build'

def remove_isysroot(flags):
    """
    >>> flags =  ['-stdlib=libc++', '-std=c++11',
    ...           '-isysroot', '/Developer/SDKs/MacOSX10.5.sdk',
    ...           '-isysroot', '/Developer/SDKs/MacOSX10.5.sdk']
    >>> remove_isysroot(flags)
    >>> print flags
    ['-stdlib=libstdc++', '-std=c++11' ]
    """
    name = '-isysroot'
    while name in flags:
        idx = flags.index(flag)
        flags.pop(idx)
        flags.pop(idx)

def options(opt):
    opt.load('compiler_cxx python')

    opt.add_option('--python-bindings', action='store_true', default=False,
            help='Generate Python bindings using SWIG (default: False)')

    opt.add_option('--enable-shared', action='store_true', default=False,
            help='Build shared library. --python-bindings automatically '
                 'activates --enable-shared (default: False)')

    opt.add_option('--cflags', action='store', default=[], help='Additional C flags')

    opt.add_option('--cxxflags', action='store', default=[], help='Additional C++ flags')

    opt.add_option('--ldflags', action='store', default=[], help='Additional linker flags')

    opt.add_option('--remove-isysroot', action='store_true', default=False,
        help='Remove -isysroot C/C++ flag that may come with python-config --cflags')


def configure(conf):
    conf.load('compiler_cxx')

    conf.env.ENABLE_SHARED = conf.options.enable_shared

    if conf.options.python_bindings:
        conf.env.PYTHON_BINDINGS = True
        conf.load('python')
        conf.check_python_version((2,4,2))
        conf.check_python_headers()

        conf.load('swig')
        if conf.check_swig_version() < (1,2,27):
            conf.fatal('this swig version is too old')

        import numpy
        numpy_inc = numpy.get_include()

        #python_inc = join(miniconda_dir,'include','python2.7')
        #conf.env.prepend_value('INCLUDES', [python_inc,numpy_inc])
        conf.env.prepend_value('INCLUDES', [numpy_inc])
        conf.env.ENABLE_SHARED = True
    else:
        conf.env.PYTHON_BINDINGS = False

    # Changing CFLAGS alters conf.load('swig')
    # See: https://github.com/waf-project/waf/issues/1663
    conf.env.append_value('CFLAGS', conf.options.cflags.split())
    conf.env.append_value('CXXFLAGS', conf.options.cxxflags.split())
    conf.env.append_value('LDFLAGS', conf.options.ldflags.split())

    if conf.options.remove_isysroot:
        remove_isysroot(conf.env.CXXFLAGS)
        remove_isysroot(conf.env.CFLAGS)
        remove_isysroot(conf.env.LDFLAGS)


def build(bld):
    args = {
        'features' : 'cxx',
        'source' : 'dfndarray.cxx',
        'target' : 'dfndarray',
        'includes' : '.',
        'export_includes' : '.',
        'vnum' : VERSION,
        'name' : 'dfndarray',
        'cxxflags' : ['-O3','-DNDEBUG'],
    }

    bld.stlib(**args)
    if bld.env.ENABLE_SHARED:
        bld.shlib(**args)

    bld.install_files('${PREFIX}/include', 'dfndarray.hxx dfndarray.txx')
    bld.install_files('${PREFIX}/lib', 'libdfndarray.a')

    if bld.env.PYTHON_BINDINGS:
        bld(
            features = 'cxx cxxshlib pyext',
            source = 'dfndarray.i',
            target = '_dfndarray',
            swig_flags = '-c++ -python',
            includes = '.',
            vnum = VERSION,
            use  = 'dfndarray',
            cxxflags = ['-g','-O3', '-DDFNDARRAY_RUNTIME_CHECK'],
        )
        python_site_package = '${PREFIX}/lib/python%s/site-packages' % bld.env['PYTHON_VERSION']
        bld.install_files(python_site_package, 'dfndarray.py')
